'''
함수선언 - def 이름()
함수호출 - 이름()
함수선언 매개변수 갯수를 맞춰야 한다. - def 이름(매개변수) ->이름(매개변수)
return의 결과값을 받지 않아도 되지만 갯수는 맞춰야 한다.
함수 내의 변수는 지역변수라서 함수가 종료되면 사라진다.
함수 내의 변경된 변수값을 전역변수에 반영하고 싶으면 리턴으로 돌려줘야 한다. 
함수 내 global이라고 하면, 전역변수에 선언되어 있는 변수주소를 가져오기 때문에 굳이 global을 사용하지 않아도 된다. 
매개변수로 리스트, 딕셔너리 사용 시 리턴 사용할 필요 없음. 주소값이 공유되기 때문에(얕은 복사 vibe)
'''
# -----------------------------------------------------------------------------------------------------------------
#  매개변수 리스트 사용
#   ㄴ> 매개변수로 리스트를 사용하는 경우에는 return을 사용할 필요가 없다. 
# -----------------------------------------------------------------------------------------------------------------
# def func1(a,a_list) :
#     a = 100
#     a_list[0] = 100
#     return a

# a = 10
# a_list = [1,2,3]

# # 함수호출
# a = func1(a,a_list)     # 두 개 이상의 데이터를 저장하는 변수 = 주소값을 저장하기 때문에 얕은 복사처럼 된다고 생각하면 된다. 주소값 그대로 전부 같은 값이 출력된다. 함수에서 리스트는 그렇다.
# # 데이터 출력   
# print(a)
# print(a_list)
# a_list = [1,2,3]
# b_list = a_list
# b_list[0] = 100

# print(a_list)
# -----------------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------------







# -------------------------------------------------------------------------------------------------------------------
# def cal(v1,sum):
#     sum = 500
#     v1 = 200
#     return v1, sum
# v1 = 100 # 전역변수
# sum = 10
# cal(v1,sum)
# print(v1)
# print(sum)

# def func1() :
#     global a    # 전역변수를 가져와서 함수 내의 공간에 두고, 결국 결과값은 아래와 같이 된다는 뭐 이런 개같은 경우..?
#     a = 100
#     print("func1 a =",a)
#     # 지역변수 값을 전역변수에 적용시키는 방법
#     return a

# def func2 () :
#     print("func2 B =",a+10)

# a = 20

# a = func1()
# func2()
# print("결과값 : ",a)
